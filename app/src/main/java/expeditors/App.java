/*
 * This source file was generated by the Gradle 'init' task
 */
package expeditors;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;

/**
 * This Java Program takes an input txt file 
 * containing entries of an person, their address, and age,
 * and process it to ouput each household and number of occupants, 
 * followed by: Each First Name, Last Name, Address and Age,
 * sorted by Last Name then First Name where the occupant(s) is older than 18.
 */
public class App {

    private static final String INPUT_PATH = "src/main/resources/input.txt";
    private static final String OUTPUT_PATH = "src/main/resources/output.txt";
    private static final int AGE_THRESHOLD = 18;
    
    public static void main(String[] args) throws FileNotFoundException, IOException {
        processInput();        
    }

    private static void processInput() throws FileNotFoundException, IOException {

        try (BufferedReader reader = new BufferedReader(new FileReader(INPUT_PATH));) {
            
            HashMap<Address, HashSet<Person>> households = new HashMap<>();
            String line;

            while ((line = reader.readLine()) != null) {
                // Process each line from input file
                String[] entryArr = processLine(line);
                
                // Create an Address object
                Address address = new Address(entryArr[2], entryArr[3], entryArr[4]);
                // Create a Person object
                Person person = new Person(entryArr[0], entryArr[1], address, Integer.parseInt(entryArr[5]));
                
                // Add each person to household, with the assumption 
                // that people with the same address share a household
                if (!households.containsKey(address)) {
                    households.put(address, new HashSet<>());
                }
                households.get(address).add(person);   
            }

            processEntries(households);

        } catch (IOException e) {
            System.out.println(e);
        }
    }

    /**
     * Process each line from BufferedReader by cleaning and trimming each field and return them as an array
     */
    private static String[] processLine(String line) {
        // Split by delimiter: ","
        String[] entryArr = line.split("\",\"");
        // Verify that there are 6 fields present in each line: first, last, address, city, state, age
        if (entryArr.length != 6) {
            throw new IllegalArgumentException("Input is not in expected format.");
        }
        // Remove all non-alphanumeric chars and trim leading/trailing spaces
        for (int i = 0; i < entryArr.length; i++) {
            entryArr[i] = entryArr[i].replaceAll( "[^a-zA-Z0-9\\s]", "").trim();                    
        }
        return entryArr;
    }
    
    /**
     * Sort each person in a household by last name, then first name, 
     * and filter out anyone older than 18
     */
    private static void processEntries(HashMap<Address, HashSet<Person>> households) throws IOException {

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(OUTPUT_PATH))) {
            
            for (HashMap.Entry<Address, HashSet<Person>> entry: households.entrySet()) {

                ArrayList<Person> occupantsList = new ArrayList<>(entry.getValue());
                
                // Sort occupants by last name then first name
                Collections.sort(occupantsList, (Person p1, Person p2) -> {
                    int result = p1.getLastName().compareToIgnoreCase(p2.getLastName());
                    if (result != 0) {
                        return result;
                    }
                    return p1.getFirstName().compareToIgnoreCase(p2.getFirstName());
                });

                // Print results to output file and terminal
                outputResultsToFile(writer, entry, occupantsList);
                printResults(entry, occupantsList);
            
            }
        } catch (IOException e) {
            System.out.println(e);
        }
    }

    /**
     * Print result to a specified output file path
     */
    private static void outputResultsToFile(BufferedWriter writer, 
        HashMap.Entry<Address, HashSet<Person>> entry, 
        ArrayList<Person> occupantsList) 
        throws IOException {
        
        writer.append("Household Address: " + entry.getKey() + "." + "\n");
        writer.append("Number of total occupants: " + entry.getValue().size() + "\n");
        writer.append("List of occupants older than 18: \n");
        
        for(Person occupant: occupantsList) {
            if(occupant.getAge() > AGE_THRESHOLD) {
                writer.append(occupant.toString() + "\n");
            }
        }
        writer.newLine();
    }

    /**
     * Print result to terminal
     */
    private static void printResults(HashMap.Entry<Address, 
        HashSet<Person>> entry, 
        ArrayList<Person> occupantsList) {
        
        System.out.println("Household Address: " + entry.getKey() + ".");
        System.out.println("Number of total occupants: " + entry.getValue().size());
        System.out.println("List of occupants older than 18: ");
        for(Person occupant: occupantsList) {
            if(occupant.getAge() > AGE_THRESHOLD) {
                System.out.println(occupant.toString());
            }
        }
        System.out.println();
    }

}
